# Generated by Django 5.2 on 2025-05-01 08:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

from django.db.models import Q, F


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Drug',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('sort', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='DrugGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReceptionMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SideEffect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('standard', 'Standard'), ('pro', 'Pro'), ('admin', 'Admin')], default='standard', max_length=10)),
                ('sex', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=6, null=True)),
                ('age', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('experience', models.CharField(blank=True, choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DecayFormula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formula', models.TextField()),
                ('drug', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='decay_formula', to='core.drug')),
            ],
        ),
        migrations.AddField(
            model_name='drug',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='drugs', to='core.druggroup'),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], max_length=10)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True)),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=255, null=True)),
                ('auto_renewal', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DrugCompatibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compatibility', models.BooleanField(default=False)),
                ('reason', models.TextField(blank=True, null=True)),
                ('drug_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compatibility_as_a', to='core.drug')),
                ('drug_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compatibility_as_b', to='core.drug')),
            ],
            options={
                'constraints': [
                    models.CheckConstraint(
                        check=~Q(drug_a=F('drug_b')),
                        name='no_self_compatibility'
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name='DrugInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info', models.TextField(blank=True, null=True)),
                ('half_life_hours', models.DecimalField(decimal_places=2, max_digits=6)),
                ('elimination_hours', models.DecimalField(decimal_places=2, max_digits=6)),
                ('drug', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='info', to='core.drug')),
            ],
            options={
                'constraints': [
                    models.CheckConstraint(
                        check=Q(elimination_hours__gte=F('half_life_hours')),
                        name='elimination_ge_half_life'
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name='EtherType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ether_type', models.CharField(max_length=255)),
                ('drug', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ether_types', to='core.drug')),
            ],
            options={
                'unique_together': {('drug', 'ether_type')},
            },
        ),
        migrations.CreateModel(
            name='IntakeDuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_duration_days', models.PositiveIntegerField()),
                ('rec_duration_days', models.PositiveIntegerField()),
                ('max_duration_days', models.PositiveIntegerField()),
                ('drug', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='intake_duration', to='core.drug')),
            ],
            options={
                'constraints': [
                    models.CheckConstraint(
                        check=Q(max_duration_days__gte=F('rec_duration_days')),
                        name='max_ge_rec_duration'
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name='DrugReception',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drug', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.drug')),
                ('reception_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.receptionmethod')),
            ],
            options={
                'unique_together': {('drug', 'reception_method')},
            },
        ),
        migrations.CreateModel(
            name='DrugSideEffect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField()),
                ('drug', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='side_effects', to='core.drug')),
                ('effect', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.sideeffect')),
            ],
            options={
                'constraints': [
                    models.CheckConstraint(
                        check=Q(level__gte=0, level__lte=10),
                        name='level_between_0_and_10'
                    ),
                ],
                'unique_together': {('drug', 'effect')},
            },
        ),
    ]
